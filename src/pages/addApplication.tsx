import { useNavigate } from "react-router";
import { useState } from "react";
import JobApplicationForm from "@/components/custom/JobApplicationForm";
import { useApplicationManagement } from "@/hooks/useApplicationManagement";
import { Company } from "@/types/company";
import { Contact } from "@/types/contact";

function AddApplication() {
  const navigate = useNavigate();
  const { newApp, handleInputChange, addApplication } =
    useApplicationManagement();

  // State for company and contact information
  const [companyInfo, setCompanyInfo] = useState({
    id: "", // This will be generated by the backend
    user_id: "", // This will be set by the backend
    name: "",
    phone: "",
    email: "",
    website: "",
    notes: "",
  });

  const [contactPerson, setContactPerson] = useState({
    id: "", // This will be generated by the backend
    user_id: "", // This will be set by the backend
    name: "",
    position: "",
    email: "",
    phone: "",
    notes: "",
  });

  // Handle changes for all form sections
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    section: "newApp" | "companyInfo" | "contactPerson"
  ) => {
    const { name, value } = e.target;

    if (section === "newApp") {
      handleInputChange(e);
    } else if (section === "companyInfo") {
      setCompanyInfo((prev) => ({ ...prev, [name]: value }));
    } else if (section === "contactPerson") {
      setContactPerson((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (companyData: Company, contactData: Contact) => {
    const companyForSubmission: Company = {
      id: companyData.id || "",
      user_id: companyData.user_id || "",
      name: companyData.name || newApp.company,
      phone: companyData.phone || null,
      email: companyData.email || null,
      website: companyData.website || null,
      notes: companyData.notes || null,
    };

    const contactForSubmission: Contact = {
      id: contactData.id || "",
      user_id: contactData.user_id || "",
      name: contactData.name || "",
      position: contactData.position || "",
      email: contactData.email || "",
      phone: contactData.phone || "",
      notes: contactData.notes || "",
    };

    try {
      await addApplication(companyForSubmission, contactForSubmission);
      navigate("/");
    } catch (error) {
      console.error("Failed to add application:", error);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen p-4">
      <JobApplicationForm
        newApp={newApp}
        companyInfo={companyInfo}
        contactPerson={contactPerson}
        onChange={handleChange}
        onSubmit={handleSubmit}
      />
    </div>
  );
}

export default AddApplication;
